plugins {
    id 'java'
}

group 'beanvest.scripts'

dependencies {
    implementation(project(":beanvest:beanvest"))
    implementation(project(":beanvest:lib:util"))
    implementation(project(":beanvest:lib:apprunner"))
    implementation(libs.bundles.logging)
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

tasks.register('generateUsageDoc', JavaExec) {
    dependsOn("generateSampleJournal")
    group = "generation"
    description = "Regenerates usage doc based on generated sample journals"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "beanvest.scripts.GenerateUsageDocMain"
    jvmArgs = ["-Dproject.dir=" + project.rootDir]
}
tasks.register('generateUsageDocNative', JavaExec) {
    dependsOn("generateSampleJournal")
    dependsOn(":beanvest:beanvest:nativeCompile")
    group = "generation"
    description = "Regenerates usage doc based on generated sample journals using native build"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "beanvest.scripts.GenerateUsageDocMain"
    environment("NATIVE_BIN_PATH", "${project.rootDir}/beanvest/beanvest/build/native/nativeCompile/beanvest")
    jvmArgs = ["-Dproject.dir=" + project.rootDir]
}
tasks.register('generateSampleJournal', JavaExec) {
    group = "generation"
    description = "Regenerates sample journal"
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "beanvest.scripts.GenerateSampleJournalMain"
    jvmArgs = ["-Dproject.dir=" + project.rootDir]
}
